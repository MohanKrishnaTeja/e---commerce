// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER 
  ADMIN
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User{
  id Int @id @default(autoincrement())
  username String
  email String @unique
  password String
  role  UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  carts Cart[]
  orders Order[]
}

model Product{
  id Int @id @default(autoincrement())
  name String
  description String
  price Decimal  @db.Decimal(10,2)
  stock Int
  categoryId Int 
  category  Category @relation(fields: [categoryId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderItems OrderItem[]
  cartItems CartItem[]
}

model Category{
  id Int @id @default(autoincrement())
  name String @unique
  description String
  createdAt DateTime @default(now())
  products Product[]
}

model Order{
  id Int @id @default(autoincrement())
  userId Int 
  user User @relation(fields: [userId], references: [id])
  status OrderStatus @default(PENDING)
  totalAmount Decimal
  createdAt DateTime @default(now())
  orderItems OrderItem[]
  payment Payment?
}

model OrderItem{
  id Int @id @default(autoincrement())
  orderId Int 
  orders Order @relation(fields: [orderId],references: [id])

  productId Int 
  products Product @relation(fields: [productId],references: [id])

  quantity Int
  price Decimal @db.Decimal(10,2)
}

model Cart{
  id Int @id @default(autoincrement())
  userId Int 
  user User @relation(fields: [userId],references: [id])
  createdAt DateTime @default(now())
  cartItems CartItem[]
}

model CartItem{
  id Int @id @default(autoincrement())
  cartId Int 
  cart Cart @relation(fields: [cartId],references: [id])

  productId Int 
  products Product @relation(fields: [productId],references: [id])

  quantity Int
}

model Payment{
  id Int @id @default(autoincrement())
  orderId Int @unique
  orders Order @relation(fields: [orderId],references: [id])
  amount Decimal
  status OrderStatus @default(PENDING)
  paymentdate DateTime
}

